/* setting global selectors for before and after */
*,
*::after,
*::before {
  box-sizing: border-box;
  font-family: Arial;
}

body {
  background-color: hsl(240, 3%, 7%);
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  margin: 0;
  padding: 1em;
  font-size: clamp(0.5rem, 2.5vmin, 1.5rem);
}

/* setting grid-template-columns to 20 as the small div spacing at second row can take 1 column while normal key is 2 columns */
.keyboard {
  display: grid;
  grid-template-columns: repeat(20, minmax(auto, 1.25rem));
  grid-auto-rows: 3em;
  gap: 0.25rem;
  justify-content: center;
}

/* fill is to fill the colour of the svg */
/* using css var to make different state appearances easier */
/* calc() line is basically adding the lightness offset if any, default 0, to the lightness value */
.key {
  font-size: inherit;
  grid-column: span 2;
  border: none;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: hsl(
    var(--hue, 200),
    var(--saturation, 1%),
    calc(var(--lightness-offset, 0%) + var(--lightness, 51%))
  );
  color: white;
  fill: white;
  text-transform: uppercase;
  border-radius: 0.25rem;
  cursor: pointer;
  user-select: none;
}

/* grid-column span 3 is to make the enter & backspace key larger */
.key.large {
  grid-column: span 3;
}

/* making sure the svg is of the right size but selecting the svg within the key */
.key > svg {
  width: 1.75em;
  height: 1.75em;
}

/* handle css styling when there is a mouse hover or when key is pressed */
/* creating a new var to do the offset to be used with calc() function in .key */
.key:hover,
.key:focus {
  --lightness-offset: 10%;
}

/* order of the css styling matters as we want the correct tile to overwrite the wrong or wrong location */
.key.wrong {
  --lightness: 23%;
}

.key.wrong-location {
  --hue: 49;
  --saturation: 51%;
  --lightness: 47%;
}

.key.correct {
  --hue: 115;
  --saturation: 29%;
  --lightness: 43%;
}

.guess-grid {
  display: grid;
  justify-content: center;
  align-content: center;
  flex-grow: 1;
  grid-template-columns: repeat(5, 4rem);
  grid-template-rows: repeat(6, 4rem);
  gap: 0.25rem;
  margin-bottom: 1em;
}

/* align-items center align all the inputs on the same axis */
.tile {
  font-size: 2em;
  color: white;
  border: 0.05em solid hsl(240, 2%, 23%);
  text-transform: uppercase;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
  user-select: none;
}
