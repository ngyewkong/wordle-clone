/* setting global selectors for before and after */
*,
*::after,
*::before {
  box-sizing: border-box;
  font-family: Arial;
}

body {
  background-color: hsl(240, 3%, 7%);
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  margin: 0;
  padding: 1em;
  font-size: clamp(0.5rem, 2.5vmin, 1.5rem);
}

.header {
  display: grid;
  grid-template-columns: repeat(20);
  justify-content: center;
  align-items: center;
  color: #d7dadc;
  border-bottom: 1px solid #3a3a3c;
}

.header.title {
  display: flex;
  font-family: Arial;
  font-size: 2em;
  font-weight: 700;
  letter-spacing: 0.2rem;
  text-transform: uppercase;
  text-align: center;
  justify-content: center;
  align-items: center;
  grid-column: span 10;
  pointer-events: none;
  color: #d7dadc;
}

/* setting grid-template-columns to 20 as the small div spacing at second row can take 1 column while normal key is 2 columns */
.keyboard {
  display: grid;
  grid-template-columns: repeat(20, minmax(auto, 1.75rem));
  grid-auto-rows: 3em;
  gap: 0.35rem;
  justify-content: center;
}

/* fill is to fill the colour of the svg */
/* using css var to make different state appearances easier */
/* calc() line is basically adding the lightness offset if any, default 0, to the lightness value */
.key {
  font-size: inherit;
  grid-column: span 2;
  border: none;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: hsl(
    var(--hue, 200),
    var(--saturation, 1%),
    calc(var(--lightness-offset, 0%) + var(--lightness, 51%))
  );
  color: white;
  fill: white;
  text-transform: uppercase;
  border-radius: 0.25rem;
  cursor: pointer;
  user-select: none;
}

/* grid-column span 3 is to make the enter & backspace key larger */
.key.large {
  grid-column: span 3;
}

/* making sure the svg is of the right size by selecting the svg within the key */
/* impt to set pointer-events to none to prevent svg or the path being selected as the target which prevent the delete from working normally */
.key > svg {
  width: 1.75em;
  height: 1.75em;
  pointer-events: none;
}

/* handle css styling when there is a mouse hover or when key is pressed */
/* creating a new var to do the offset to be used with calc() function in .key */
.key:hover,
.key:focus {
  --lightness-offset: 10%;
}

/* order of the css styling matters as we want the correct tile to overwrite the wrong or wrong location */
.key.wrong {
  --lightness: 23%;
}

.key.wrong-location {
  --hue: 49;
  --saturation: 51%;
  --lightness: 47%;
}

.key.correct {
  --hue: 115;
  --saturation: 29%;
  --lightness: 43%;
}

.guess-grid {
  display: grid;
  justify-content: center;
  align-content: center;
  flex-grow: 1;
  grid-template-columns: repeat(5, 4rem);
  grid-template-rows: repeat(6, 4rem);
  gap: 0.25rem;
  margin-bottom: 1em;
  margin-top: 1em;
}

/* align-items center align all the inputs on the same axis */
.tile {
  font-size: 2em;
  color: white;
  border: 0.05em solid hsl(240, 2%, 23%);
  text-transform: uppercase;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
  user-select: none;
  transition: transform 250ms linear;
}

/* using data attributes in css to style the tiles */
.tile[data-state="active"] {
  border-color: hsl(200, 1%, 34%);
}

.tile[data-state="wrong"] {
  border: none;
  background-color: hsl(240, 2%, 23%);
}

.tile[data-state="wrong-location"] {
  border: none;
  background-color: hsl(49, 51%, 47%);
}

.tile[data-state="correct"] {
  border: none;
  background-color: hsl(115, 29%, 43%);
}

.tile.shake {
  animation: shake 250ms ease-in-out;
}
/* setting the shake animation frames */
@keyframes shake {
  10% {
    transform: translateX(-5%);
  }
  30% {
    transform: translateX(5%);
  }
  50% {
    transform: translateX(-10%);
  }
  70% {
    transform: translateX(10%);
  }
  90% {
    transform: translateX(-5%);
  }
  100% {
    transform: translateX(0%);
  }
}

.tile.flip {
  transform: rotateX(90deg);
}

.tile.dance {
  animation: dance 500ms ease-in-out;
}

@keyframes dance {
  10% {
    transform: translateY(-50%);
  }
  30% {
    transform: translateY(5%);
  }
  50% {
    transform: translateY(-25%);
  }
  70% {
    transform: translateY(2.5%);
  }
  90% {
    transform: translateY(-5%);
  }
  100% {
    transform: translateY(0%);
  }
}

/* using transform to force dead center, z-index to force it to appear on top */
.alert-container {
  position: fixed;
  top: 10vh;
  left: 50vw;
  transform: translateX(-50%);
  z-index: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* pointer-events none will disable selecting on an alert */
.alert {
  pointer-events: none;
  background-color: hsl(204, 7%, 85%);
  padding: 0.75em;
  border-radius: 0.25em;
  opacity: 1;
  transition: opacity 500ms ease-in-out;
  margin-bottom: 0.5em;
}

.alert:last-child {
  margin-bottom: 0;
}

.alert.hide {
  opacity: 0;
}
